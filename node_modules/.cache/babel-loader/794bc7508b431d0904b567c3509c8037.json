{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shashidhar.AS\\\\Downloads\\\\iNotes-master\\\\iNotes-master\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  // const host = \"http://localhost:5000\"\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); // Add a Note\n\n  const getNotes = async () => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/fetchAllNotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  }; // Add a Note\n\n\n  const addNote = async (title, description, tag) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/addNote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  }; // Delete a Note\n\n\n  const deleteNote = async id => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // Edit a Note\n\n\n  const editNote = async (id, title, description, tag) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes)); // Logic to edit in client\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["C:/Users/shashidhar.AS/Downloads/iNotes-master/iNotes-master/src/context/notes/NoteState.js"],"names":["React","useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","console","log","newNotes","filter","_id","editNote","parse","index","length","element","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n\nconst NoteState = (props) => {\n    // const host = \"http://localhost:5000\"\n    const host = \"http://localhost:5000\"\n    const notesInitial = []\n    const [notes, setNotes] = useState(notesInitial)\n\n    // Add a Note\n    const getNotes = async () => {\n        // API Call\n        const response = await fetch(`${host}/api/notes/fetchAllNotes`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            }\n        });\n        const json = await response.json();\n        setNotes(json);\n    }\n\n    // Add a Note\n    const addNote = async (title, description, tag) => {\n        // API Call\n        const response = await fetch(`${host}/api/notes/addNote`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            },\n            body: JSON.stringify({title, description, tag})\n        });\n        const note = await response.json();\n        setNotes(notes.concat(note))\n    }\n\n    // Delete a Note\n    const deleteNote = async (id) => {\n        // API Call\n        const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            }\n        });\n        const json = await response.json();\n        console.log(json);\n        const newNotes = notes.filter((note) => { return note._id !== id })\n        setNotes(newNotes)\n    }\n\n    // Edit a Note\n    const editNote = async (id, title, description, tag) => {\n        // API Call\n        const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            },\n            body: JSON.stringify({title, description, tag})\n        });\n\n        const json = response.json();\n        console.log(json);\n\n        let newNotes = JSON.parse(JSON.stringify(notes));\n\n        // Logic to edit in client\n        for (let index = 0; index < notes.length; index++) {\n            const element = notes[index];\n            if (element._id === id) {\n                newNotes[index].title = title\n                newNotes[index].description = description\n                newNotes[index].tag = tag\n                break;\n            }\n        }\n        setNotes(newNotes);\n    }\n\n    return (\n        <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNotes }}>\n            {props.children}\n        </NoteContext.Provider>\n    )\n}\n\nexport default NoteState;"]},"metadata":{},"sourceType":"module"}